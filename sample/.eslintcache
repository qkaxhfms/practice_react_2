[{"D:\\practice_react_2\\sample\\src\\index.js":"1","D:\\practice_react_2\\sample\\src\\Components\\App.js":"2","D:\\practice_react_2\\sample\\src\\Components\\Item.js":"3","D:\\practice_react_2\\sample\\src\\Components\\Item2.js":"4","D:\\practice_react_2\\sample\\src\\Components\\Scroll.js":"5","D:\\practice_react_2\\sample\\src\\Components\\Header.js":"6"},{"size":207,"mtime":1609517782055,"results":"7","hashOfConfig":"8"},{"size":354,"mtime":1610285846549,"results":"9","hashOfConfig":"8"},{"size":1505,"mtime":1609568517219,"results":"10","hashOfConfig":"8"},{"size":839,"mtime":1609569807031,"results":"11","hashOfConfig":"8"},{"size":1230,"mtime":1610285829781,"results":"12","hashOfConfig":"8"},{"size":1111,"mtime":1610286582133,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1wxumty",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\practice_react_2\\sample\\src\\index.js",[],["29","30"],"D:\\practice_react_2\\sample\\src\\Components\\App.js",[],"D:\\practice_react_2\\sample\\src\\Components\\Item.js",[],["31","32"],"D:\\practice_react_2\\sample\\src\\Components\\Item2.js",["33"],"import React, { useState, useEffect, useMemo } from \"react\";\r\n\r\nconst Item2 = () => {\r\n    \r\n    const [input, setInput] = useState(\"\");\r\n    // const [inputLength, setInputLength] = useState(0);\r\n    // const updateLength = () => setInputLength(input.length);\r\n    // useEffect(updateLength, [input]);\r\n    const inputLength = useMemo(() => input.length, [input]);\r\n    // 기존에 수행한 연산의 결과값을 메모리에 저장함으로써 동일한 계산 반복 수행을 줄임\r\n\r\n    const onChangeLength = (e) => {\r\n        const {\r\n            target: { value },\r\n        } = e;\r\n        setInput(value);\r\n    };\r\n\r\n    return(\r\n        <>\r\n            <div>\r\n                <input onChange={onChangeLength}/>\r\n                <label>{inputLength}</label>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Item2;","D:\\practice_react_2\\sample\\src\\Components\\Scroll.js",[],"D:\\practice_react_2\\sample\\src\\Components\\Header.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"34","replacedBy":"38"},{"ruleId":"36","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":1,"column":27,"nodeType":"42","messageId":"43","endLine":1,"endColumn":36},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],["44"],["45"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]